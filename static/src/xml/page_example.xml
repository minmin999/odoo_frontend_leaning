<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">

   <!--自定义页面的模板-->
    <t t-name="odoo.custom.page">
        <!--模板的根元素, 注意只能有一个根元素, 即这个元素不能再有其他同级元素-->
        <div class="wrap">
            <section class="overflow-hidden bg-900 oe_slides_s_banner"
                     style="background-image: url(&quot;//odoocdn.com/website_slides/static/src/img/banner_default.svg&quot;); background-size: cover; background-position: 55% 54%;height: 380px;">
                <div class="container mt-3 mb-5 pt-lg-4 pb-lg-1">
                    <h1 class="display-1 text-white">知识</h1>
                    <div class="display-2 text-white d-flex">
                        <span style="padding-top: 0.25em">就是</span>
                        <img src="//odoocdn.com/openerp_slides/static/src/img/2019/oe_slides_splash_super.svg" class="ml-n2 mr-n4" style="height:2em; width: auto"/>
                        <span style="padding-top: 0.25em">超能力!</span>
                    </div>
                </div>
            </section>
            <main class="container">
                <div class="o_content row">
                    <aside>
                        <!--侧边栏内容将插入到这里-->
                    </aside>
                  <!--文章将插入到这里-->
                </div>
            </main>
        </div>
    </t>

    <!--文章模板-->
    <t t-name="odoo.js.article">
        <!--后续在这个根目录下面插入章节Widget-->
        <article class="doc-body">
            <!--文章章节将插入到这里-->
        </article>
    </t>

    <!--文章章节模板-->
    <t t-name="odoo.js.article.section">
        <div class="section">
        <h1>Odoo前端开发</h1>
            <p>Odoo的前端是一个使用组件化开发的<a href="https://www.jianshu.com/p/d96197139b5b" target="_blank">MVC</a>框架, 这是一个体系复杂而层级分明的框架。页面的每个部分都是一个组件。
                学习这个框架的最好的切入点是先弄懂Odoo实现的对象(组件)继承机制，以及最底层的Widget。</p>
        <h2 id="t1">1. 对象继承和混入</h2>
            <p>Odoo js框架是用ES5实现的。在ES5中，<a href="https://blog.csdn.net/weixin_34226706/article/details/91900073" target="_blank">定义类的标准方法</a>
                是定义一个函数并在其原型对象上添加方法。但Odoo为了实现继承和混入，实现了一套自己的类系统，这是受到<a href="https://johnresig.com/blog/simple-javascript-inheritance/" target="_blank">简单的JavaScript继承</a>这篇文章的启发。</p>
        <h3 id="t1_1">1.1. 继承</h3>
        <p>Odoo实现了一套对象继承和扩展机制, 用于实现类似面向对象的编程方式</p>
        <ol>
            <li>
                <p>在Odoo前端框架的最底层, 实现了一个OdooClass对象, 这个对象实现以下3个方法:</p>
                <p>extend - 可以用于通过继承一个已有的对象, 创建一个<strong>新的对象</strong>, 新对象继承了父对象的属性和方法。</p>
                <div class="highlight-javascript">
                    <div class="highlight">
                        <pre>// 定义Class1类， 它继承了core.Class, 因此它有了extend和include方法
var Class1 = core.Class.extend({
    function1: function () {
        alert('调用了Class1.function1');
    }
});

// 定义Class2类， 它继承了Class1，它就拥有了Class1里面定义的方法和属性
var Class2 = Class1.extend({ // Class2继承了Class1
    function1: function () { //重写了Class1的方法
        // 调用父类中**同名**的方法，使用这个方法实现了代码重用
        this._super(); // 背后的实现是, 把这行代码替换成Class1.function1里面的代码
        alert('调用了Class2.function1'); // 添加了自己的代码
    },
    function2: function () { // 定了了一个自己的方法
        alert('调用了Class2.function2');
    }
});</pre>
                </div>
                </div>
                <div>试一试:
                    <button type="button" class="btn btn-success cls1-f1">调用Class1.function1</button>
                    <button type="button" class="btn btn-danger cls2-f1">调用Class2.function1</button>
                    <button type="button" class="btn btn-warning cls2-f2">调用Class2.function2</button>
                </div>
                <p>include - 可以用于扩展<strong>原来的对象</strong>, 注意和extend的区别。</p>
                <div class="highlight-javascript">
                    <div class="highlight">
                        <pre>// 定义Class3类， 它继承了Class2，它就拥有了Class1,Class2里面定义的方法和属性
var Class3 = Class2.extend({
    // 重写父类的方法, 调用了_super执行父类的代码
    function1: function () {
        this._super(); // 调用了父类的方法
        alert('调用了Class3.function1');
    }
});

// 用include方法扩展已有的Class3类，重写原来的方法，或添加新的方法
Class3.include({ // 扩展了Class3
    // 覆盖了父类的方法, 不调用_super, 父类代码不会执行
    function2: function () { // 定了了一个自己的方法
        alert('调用了Class3.function2');
    },
    function3: function () { // 通过这个定义, 给function3添加了一个新方法
        alert('调用了Class3.function3');
    }
});</pre>
                    </div>
                </div>
                <div>试一试:
                    <button type="button" class="btn btn-success cls3-f1">调用Class3.function1</button>
                    <button type="button" class="btn btn-warning cls3-f2">调用Class3.function2</button>
                </div>
                <p>this._super() - 调用父类对象(或原对象)的同名方法。</p>
            </li>
            <li>这种继承机制是基于这篇文章实现的，<a href="https://johnresig.com/blog/simple-javascript-inheritance/" target="_blank">简单JavaScript继承</a>。代码定义在addons/web/static/src/js/core/class.js。</li>
        </ol>
        <h3 id="t1_2">1.2. 混入</h3>
        <p>混入是另一种实现代码重用的方式。类似面向对象语言中的多继承，可以同时混入多个对象的代码。</p>
            <div class="highlight-javascript">
                    <div class="highlight">
                        <pre>// 定义一个ClassMixin对象
var ClassMixin = {
    function5: function() {
        alert('ClassMixin.function5');
    }
};

// 定义Class4类, 它继承Class3的同时还混入了一个ClassMixin，
// 它因此拥有了Class1,2,3和ClassMixin的方法和属性，就是这么神奇！
var Class4 = Class3.extend(ClassMixin, {
    function4: function() {
        alert('Class4.function4');
    }
});</pre>
                    </div>
                </div>
            <div>试一试:
                <button type="button" class="btn btn-success cls4-f1">调用Class4.function1</button>
                <button type="button" class="btn btn-info cls4-f3">调用Class4.function3</button>
                <button type="button" class="btn btn-warning cls4-f4">调用Class4.function4</button>
                <button type="button" class="btn btn-danger cls4-f5">调用Class4.function5</button>
                </div>
        <h3 id="t1_3">1.3. 总结</h3>
        <p>得益于OdooClass实现的继承和混入机制，使Odoo Js框架能够用层次化的对象组织代码，让代码条例清晰， 可重复使用。</p>
        <img src="odoo_frontend_leaning/static/image/class.png" alt=""/>
        <h2 id="t2">2.最底层的Widget</h2>
        <p>Odoo框架实现了一个底层组件Widget, 页面上看到所有的可视化组件都是基于这个组件实现的</p>
        <h3 id="t2_1">2.1. Widget对象的代码</h3>
        <div class="highlight-javascript">
            <div class="highlight">
                <pre>// 官方web模块代码, web\\static\\src\\js\\core\\widget.js
// 定义了一个最底层的Widget, 它继承了core.Class, 并混入了mixins.PropertiesMixin, ServicesMixin
var Widget = core.Class.extend(mixins.PropertiesMixin, ServicesMixin, {

    // 常用属性
    events: {}, // 用于注册类似click之类的jquery事件, 在页面上出发该事件时，执行事件绑定的代码
    custom_events: {}, // 注册自定义事件。PropertiesMixin会自动在幕后用jquery的on和off方法绑定和解除事件。
    template: null, // 指定这个组件使用的xml模板，在组件插入到Dom的时候，会渲染成Html
    $el: null, // 组件的根元素

    // 组件添加到页面时调用的方法, 调用顺序也是如下所示
    init: function (parent) {...}, // 实例化组件的代码，一般要传入模板的数据就写在这里
    appendTo: function (target) {...}, // 将组件插入到Bom中一个元素的内部，类似的方法还有insertAfter，insertBefore
    willStart: function () {...}, // 组件在插入Dom之前会调用该方法
    renderElement: function () {}, // 把模板和数据渲染成html
    // 这中间有段代码, 渲染完成后, 根元素$el上已经有了整个组件的html,
    // 然后用 $el.prependTo(target) 将html插入到页面上的target元素的开头位置
    start: function () {...}, // 组件在插入Dom之后会调用该方法。这个时候，组件已经可以在页面上显示出来了

    // 其他常用方法
    destroy: function () {...}, // 用于销毁组件
    do_hide: function () {...}, // 用于在页面上隐藏组件
    do_show: function () {...}, // 用于在页面上显示组件
    do_toggle: function (display) {...}, // 用于在页面上切换隐藏/显示组件
    setElement: function (element) {...}, // 将组件挂载到到Bom中的一个元素, 并把这个元素作为根元素
    $: function (selector) {}, 查找组件根元素下面的元素, 等同于 $el.find(selector)
});</pre>
            </div>
        </div>
        <h3 id="t2_2">2.2. 自定义一个Widget</h3>
        <p>演示如何指定模板，传递数据到模板，绑定事件，查找元素。</p>
        <div class="highlight-javascript">
            <div class="highlight">
                <pre>
// 定义一个最简单的Widget
var SimpleWidget = Widget.extend({
    // 指定模板, 定义在 \\static\\src\\xml\\simple_widget.xml 文件中
    template: 'simple.widget',
    // 重写init方法
    init: function (parent, text, show_image, image) {
        // 调用父类的init方法
        this._super.apply(this, arguments);
        // 将变量绑定到属性, 将可以在模板中引用
        this.text = text;
        this.show_imgae = show_image;
        this.image = image;
    }
});</pre>
            </div>
        </div>
        <h3 id="t2_3">2.3. 定义一个Qweb的模板</h3>
        <p>Qweb是Odoo实现的一套模板引擎。用法和Vue里面的模板非常类似。<a href="https://www.odoo.com/documentation/13.0/reference/qweb.html" target="_blank">官方文档</a></p>
        <div class="highlight-xml">
            <div class="highlight">
                <pre><xmp><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<templates id="template" xml:space="preserve">

    <!--定义一个模板-->
    <t t-name="simple.widget">
        <!--模板的根元素, 注意只能有一个根元素, 即这个元素不能再有其他同级元素-->
        <div class="simple">
            <!-- t-xx 都是qweb模板的标签, widget.xx 是模板要渲染的数据-->
            <h2><t t-esc="widget.text"/></h2>
            <t t-if="widget.show_imgae and widget.image">
                <img id="image" t-attr-src="widget.image" alt="图片"/>
            </t>
        </div>
    </t>

    <!-- 最好在 odoo_frontend_leaning/__manifest__.py 文件中指定：
        'qweb': ['static/src/xml/*.xml']
        这样，odoo会在渲染widget之前，先加载这里的模板。否则有时会出现渲染widget时，模板还没有加载的问题。
    -->

</templates>]]></xmp></pre>
            </div>
        </div>
        <div>Qweb的特点:</div>
        <ol>
            <li>能够动态设置元素的值，元素的属性值</li>
            <li>能够使用条件判断，循环</li>
            <li>能够使用子模板</li>
            <li>能够继承和扩展</li>
        </ol>

        <h3 id="t2_4">2.4. 使用这个Widget</h3>
        <p>演示如何把这个Widget在页面上显示出来。</p>
        <div class="highlight-javascript">
            <div class="highlight">
                <pre>
var ArticleSectionWidget = Widget.extend({
    template: 'odoo.js.article.section',
    events: {
        'click .showSimpleWidget': 'showSimpleWidget'
    },
    showSimpleWidget: function () {
        // 实例化一个组件, 这个时候模板并没有渲染。this表示当前组件，会成为SimpleWidget的父组件
        var widget1 = new SimpleWidget(this, "这是一个简单的Widget", true, "/odoo_frontend_leaning/static/image/class.png");
        // 清空目标元素，防止重复显示
        self.$('.show_simple').empty();
        // 调用appendTo方法, 会先将模板渲染成html, 然后再插入目标元素内部
        widget1.appendTo(self.$('.show_simple'));
    }
});</pre>
            </div>
        </div>
        <div>试一试:
            <button type="button" class="btn btn-success showSimpleWidget">显示组件</button>
            <button type="button" class="btn btn-danger destroySimpleWidget">销毁组件</button>
        </div>
        <div class="show_simple">
            <p>在这里显示一个简单的组件，显示一段文字和一张图片。</p>
        </div>

        <h3 id="t2_5">2.5 混入ServicesMixin对象</h3>
        <p>最底层的Widget定义时<a href="#t2_1">混入了ServicesMixin对象</a>, 该对象中定义了一些非常有用的方法。</p>
        <ol>
            <li>
                <p>_rpc方法, 可以用于调用Python代码，获取或更新后台数据</p>
                <div class="highlight-javascript">
                    <div class="highlight">
                        <pre>
var ArticleSectionWidget = Widget.extend({
    template: 'odoo.js.article.section',
    events: {
        'click .showSimpleWidgetRpc': 'showSimpleWidgetRpc',
    },
    showSimpleWidgetRpc: function () {
        // 演示如何从后台取数据
        this._rpc({
            route: '/odoo_frontend_leaning/get_contents',
            params: {id: 111}
        }).then(function (result) {
            var widget2 = new SimpleWidget(this, result.text, result.show_image, result.image);
            self.$('.show_simple_rpc').empty();
            widget2.appendTo(self.$('.show_simple_rpc'));
        });
    }
});</pre>
                    </div>
                </div>
                <div>试一试:
                    <button type="button" class="btn btn-success showSimpleWidgetRpc">获取数据</button>
                    <button type="button" class="btn btn-danger destroySimpleWidget">销毁组件</button>
                </div>
                <div class="show_simple_rpc">
                    <p>在这里显示组件</p>
                </div>
            </li>
            <li>
                <p>do_action方法，用于执行一个Odoo的动作，比如打开一个视图。</p>
                <div class="highlight-javascript">
                    <div class="highlight">
                        <pre>
var ArticleSectionWidget = Widget.extend({
    template: 'odoo.js.article.section',
    events: {
        'click .open_form_view': 'open_form_view',
        'click .open_url': 'open_url',
    },
    open_form_view: function (ev) {
        // 演示如何用do_action打开一个视图
        this.do_action({
            type: 'ir.actions.act_window',
            view_type: 'form',
            view_mode: 'form',
            views: [[false, 'form']],
            target: 'new',
            name: '前端学习',
            res_model: 'odoo.frontend.learning',
            res_id: 1,
        });
    },
    open_url: function (ev) {
        // 演示如何用do_action打开一个URL
        this.do_action({
            type: 'ir.actions.act_url',
            url: 'https:\\www.baidu.com',
            target: '_blank',
        });
    },
});</pre>
                    </div>
                </div>
                <div>试一试:
                    <button type="button" class="btn btn-success open_form_view">打开一个视图</button>
                    <button type="button" class="btn btn-info open_url">打开百度</button>
                </div>
            </li>
            <li>
                <p>do_notify, do_warn方法，用于在页面上显示一个通知和警告。</p>
                <div class="highlight-javascript">
                    <div class="highlight">
                        <pre>
var ArticleSectionWidget = Widget.extend({
    template: 'odoo.js.article.section',
    // 注册jquery事件，触发元素的事件时，执行绑定的方法。注意, 元素必须位于根元素里面, 否则触发不了。
    events: {
        // '事件名 选择器': '方法名' 或一个函数,
        'click .send_notify': 'send_notify',
    },
    send_notify: function (ev) {
        // 演示如何发出通知和警告
        this.do_notify('通知', '这是一个通知！');
        this.do_warn('警告', '这是一个警告！');
    }
});</pre>
                    </div>
                </div>
                <div>试一试:
                    <button type="button" class="btn btn-warning send_notify">发出通知和警告</button>
                </div>
            </li>
            <li>ServicesMixin对象的代码位于: addons/web/static/src/js/core/service_mixins.js</li>
        </ol>

        <h3 id="t2_6">2.6 混入mixins.PropertiesMixin</h3>
        <p>最底层的Widget定义时<a href="#t2_1">混入了mixins.PropertiesMixin对象</a>, 通过该对象实现了事件(<a href="https://www.w3school.com.cn/jquery/jquery_ref_events.asp" target="_blank">Jquery事件</a>, 自定义事件)，组件的父子关系，组件属性3种功能。</p>
        <ol>
            <li>
                <p>Jquery事件</p>
                <p>例如上图所示, 使用events属性注册Jquery事件。当用户在页面上点击类名为send_notify的元素时，执行send_notify方法。</p>
            </li>
            <li>
                <p>自定义事件</p>
                <div class="highlight-javascript">
                    <div class="highlight">
                        <pre>
var ArticleWidget = Widget.extend({
    // 注册自定义事件, 通过在代码中调用 ArticleWidget实例.trigger('dataLoaded')
    custom_events: {
        dataLoaded: '_onLoadedNotify',
    },
    _onLoadedNotify: function (ev) {
        this.do_notify('通知', '数据从后台加载完毕！');
    }
});

var ArticleSectionWidget = Widget.extend({
    showSimpleWidgetRpc: function () {
        var self = this;
        // 演示如何从后台取数据
        this._rpc({
            route: '/odoo_frontend_leaning/get_contents',
            params: {id: 111}
        }).then(function (result) {
            var widget2 = new SimpleWidget(self, result.text, result.show_image, result.image);
            self.$('.show_simple_rpc').empty();
            widget2.appendTo(self.$('.show_simple_rpc'));
            self.widget2 = widget2;

            // 演示触发另一个Widget的自定义事件, self.getParent()获得父组件, 即ArticleWidget
            self.getParent().trigger('dataLoaded');
        });
    },
});</pre>
                    </div>
                </div>
                <div>试一试:
                    <button type="button" class="btn btn-success showSimpleWidgetRpc">触发自定义事件</button>
                </div>
            </li>
            <li>
                <p>组件的父子关系</p>
                <div class="highlight-javascript">
                    <div class="highlight">
                        <pre>
var ArticleSectionWidget = Widget.extend({
    start: function () {
        // 实例化文章章节组件。把this传入到ArticleSectionWidget的实例化方法中,
        // ArticleWidget和ArticleSectionWidget就有了父子关系。
        // 可以使用getParent(), getChildren()之类的方法获得组件的父组件和子组件。
        var section = new ArticleSectionWidget(this);
        // 插入到自己的根元素里面。$el就是代表根元素。
        section.appendTo(this.$el);
    },
});</pre>
                    </div>
                </div>
            </li>
            <li>
                <p>组件属性</p>
                <p>除了直接在this上面设置属性值外，还可以用一个set方法来设置组件的属性值。使用这种方式，当值改变时，会触发一个change事件。可以监听这个事件并绑定处理函数。</p>
                <div class="highlight-javascript">
                    <div class="highlight">
                        <pre>
var ArticleSectionWidget = Widget.extend({
    // 注册jquery事件，触发元素的事件时，执行绑定的方法。注意, 元素必须位于根元素里面, 否则触发不了。
    events: {
        'click .do_set': 'do_set',
    },
    do_set: function (ev) {
        // 演示2种设置组件的属性值的方法
        this.text = "text1"; // 1.直接在this上设置
        this.do_notify('提示', "text的值是：" + this.text); // 直接在this上获取

        this.set('show_image', true); // 2.通过set方法设置
        this.do_notify('提示', "show_image的值是：" + this.get('show_image')); // 通过get方法获取

        var self = this;
        // 通过set方法设置属性值得好处是, 值修改时会自动触发一个change方法
        // 监听这个事件，并绑定处理函数
        this.on("change:show_image", this, function (ev) { // 注意事件名必须是 "change:属性名"
            self.do_warn('提示', "show_image的值被改成了: " + ev.get('show_image'));
        });

        this.set('show_image', false); // 修改属性值
        this.set('show_image', true);

        this.off("change:show_image"); // 解除监听事件
    }
});</pre>
                    </div>
                </div>
                <div>试一试:
                    <button type="button" class="btn btn-success do_set">设置属性值</button>
                </div>
            </li>
            <li>mixins.PropertiesMixin对象的代码位于: addons/web/static/src/js/core/mixins.js</li>
        </ol>

        <h3 id="t2_7">2.6 总结</h3>
        <p>Widget是Odoo前端开发的基础, 最好深入理解。</p>
        <h2 id="t3">3. 用组件开发页面</h2>
        <h3 t="t3_1">3.1 页面结构</h3>
        <p>我们现在看到的这个页面是由4个Widget嵌套实现的，页面结构如下所示。</p>
        <img src="/odoo_frontend_leaning/static/image/page.png" alt="页面结构"/>
        <p>嵌套的组件具有父子关系。打开页面时，要先把父组件添加(实例化并渲染)到页面，再把子组件添加到父组件内部。这个页面会按照以下步骤实例化各个组件：</p>
        <ol>
        <li><p>点击菜单时，会自动实例化OdooCustomPageAction组件</p></li>
            <li id="action">
                <p>在OdooCustomPageAction组件的start方法里实例化ArticleWidget组件</p>
                <div class="highlight-javascript">
                <div class="highlight">
                    <pre>
// 通过继承AbstractAction定义一个客户端动作
var OdooCustomPageAction = AbstractAction.extend({
    // 指定用于渲染打开页面的模板, 模板定义在odoo_frontend_leaning/static/src/xml/page_example.xml
    template: 'odoo.custom.page',
    // 重写 AbstractAction.start方法, 添加渲染文章Widget的代码
    start: function () {
        var self = this;
        // 先等父对象的start方法执行完毕，再实例化子组件。
        return this._super.apply(this, arguments).then(function () {
            var self = this;
            // 实例化组件
            var article = new ArticleWidget(self, []);
            // 把ArticleWidget组件添加到这个组件的o_content元素内部
            article.appendTo(self.$('.o_content'));
            // 隐藏页面元素
            $('.o_main_content').hide();
        });
    },
});

// 注册这个动作, 注册后就可以在菜单上使用这个动作了
core.action_registry.add('odoo_custom_page_action', OdooCustomPageAction);
                    </pre>
                </div>
            </div>
            </li>
            <li>
            <p>ArticleWidget组件的start方法里实例化ArticleSectionWidget组件和ArticleNavigationWidget组件</p>
                <div class="highlight-javascript">
                <div class="highlight">
                    <pre><![CDATA[
var ArticleWidget = Widget.extend({
// 通过这段代码把2个组件添加到了页面
start: function () {
    // 实例化文章章节组件。把this传入到ArticleSectionWidget的实例化方法中,
    // ArticleWidget和ArticleSectionWidget就有了父子关系。
    // 可以使用getParent(), getChildren()之类的方法获得组件的父组件和子组件。
    var section = new ArticleSectionWidget(this);
    // 插入到自己的根元素里面。$el就是代表根元素。

    var self = this;
    var def = section.appendTo(this.$el);
    // 由于文章导航组件的内容是从页面动态获得的， 所以要等文章章节组件渲染完毕并添加到页面
    def.then(function () {
        // 取到文章的标题
        var headers = section.$el.children().filter('h2, h3');
        var headers2 = [];
        for (var i = 0; i < headers.length - 1; i++) {
            // 将标题的id和文本添加到数组
            headers2.push({id: headers[i].id, text: headers[i].innerText})
        }
        // 获得OdooCustomPageAction组件的实例
        var parent = self.getParent();
        // 实例化ArticleNavigationWidget组件
        var navigation = new ArticleNavigationWidget(parent, headers2);
        // 将组件添加到页面
        navigation.replace(parent.$('aside'));
    });
}
});]]></pre>
                </div>
            </div>
            </li>
        </ol>

        <h3 id="t3_2">3.2 客户端动作</h3>
        <p>OdooCustomPageAction 是一个客户端动作，它需要和菜单关联起来。</p>
        <ol>
            <li>定义并注册OdooCustomPageAction，如<a href="#action">上图</a></li>
            <li>
                <p>在后端定义一个动作，并和菜单关联</p>
            <div class="highlight-xml">
            <div class="highlight">
                <pre><xmp><![CDATA[<!--定义一个打开自定义页面的动作, 注意model是ir.actions.client-->
<record id="action_odoo_frontend_learning1" model="ir.actions.client">
    <field name="name">前端框架基础</field>
    <!--/static/src/js/webclient_example.js指定注册的客户端动作-->
    <field name="tag">odoo_custom_page_action</field>
</record>

<menuitem id="menu_odoo_frontend_learning1"
      parent="menu_odoo_frontend_learning_root"
      name="前端框架基础"
      action="action_odoo_frontend_learning1"
      sequence="10"/>]]></xmp></pre>
            </div>
        </div>
            </li>
        </ol>
            <h2 id="t4">4. Odoo JavaScript模块</h2>
            <p>以上定义的js代码都包含在odoo.define()里面, 这是一个js模块，可以在其他文件里面导入。</p>
            <div class="highlight-javascript">
                <div class="highlight">
                    <pre>
// 定义一个Odoo JavaScript模块
// 格式 odoo.define(模块名称, 一个函数);
odoo.define('odoo_frontend_leaning.OdooCustomPageExample', function (require) {

    // 导入要用到的其他模块
    var AbstractAction = require('web.AbstractAction');
    var core = require('web.core');
    // 导入我们自己定义的模块
    var ArticleWidget = require('odoo_frontend_leaning.OdooJsArticle').ArticleWidget;

    var OdooCustomPageAction = AbstractAction.extend({

    });

    // 用于在在其他模块取到这个对象
    // 比如 var OdooCustomPageAction = require('odoo_frontend_leaning.OdooCustomPageExample');
    return OdooCustomPageAction;

});</pre>
                </div>
            </div>
            <h2 id="t5">5.最后一步</h2>
            <p>将定义的js, css文件添加到asset，这样文件就会被加载到页面。</p>
            <div class="highlight-xml">
            <div class="highlight">
                <pre><xmp><![CDATA[<template id="assets_backend" inherit_id="web.assets_backend">
    <xpath expr="." position="inside">
        <script type="text/javascript"
                src="/odoo_frontend_leaning/static/src/js/article.js"/>
        <script type="text/javascript"
                src="/odoo_frontend_leaning/static/src/js/webclient_example.js"/>
        <link rel="stylesheet"
              href="/odoo_frontend_leaning/static/src/css/style.scss"/>
        <link rel="stylesheet"
              href="/odoo_frontend_leaning/static/src/css/article.css"/>
    </xpath>
</template>]]></xmp></pre>
            </div>
        </div>
            <p>其他请参见模块代码。</p>
        </div>
    </t>

    <!--文章侧边导航栏模板-->
    <t t-name="odoo.js.article.navigation">
        <aside>
            <div class="navbar-aside text-center" style="width: 239px;">
                <ul class="list-group nav text-left">
                    <t t-foreach="widget.headers" t-as="header">
                        <li class="list-group-item">
                            <a t-att-href="'#' + header.id"
                               class="reference ripple internal"
                               style="position: relative; overflow: hidden;"><t t-esc="header.text"/></a>
                        </li>
                    </t>
                </ul>
            </div>
        </aside>
    </t>

</templates>
